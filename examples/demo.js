#!/usr/bin/env node

/**
 * Demonstration script showing the Prompt Engineer MCP Server output
 * This script shows what the refined prompts look like
 */

const { runCodexCLI } = require('../dist/codex.js');

const examples = [
  {
    title: "CSV to PostgreSQL ETL Script",
    input: {
      prompt: "Quero um script que leia CSV e grave no Postgres com valida√ß√£o",
      context: "Sistema de ETL para dados financeiros cr√≠ticos",
      tags: ["etl", "postgres"]
    }
  },
  {
    title: "React Dashboard Development", 
    input: {
      prompt: "Criar um dashboard em React para mostrar m√©tricas",
      context: "Aplica√ß√£o web para monitoramento de vendas",
      tags: ["react", "frontend"]
    }
  },
  {
    title: "REST API for User Management",
    input: {
      prompt: "Desenvolver API REST para gerenciar usu√°rios com autentica√ß√£o",
      context: "Sistema corporativo com JWT e roles",
      tags: ["api", "jwt", "security"]
    }
  }
];

async function demonstratePromptRefinement() {
  console.log('üéØ Prompt Engineer MCP Server - Demonstration');
  console.log('=' .repeat(80));
  console.log('This demonstrates how the server refines prompts with structured output.\n');

  for (const example of examples) {
    console.log(`üìã ${example.title}`);
    console.log('-' .repeat(50));
    console.log(`üí≠ Original Prompt: "${example.input.prompt}"`);
    
    if (example.input.context) {
      console.log(`üîç Context: ${example.input.context}`);
    }
    
    if (example.input.tags) {
      console.log(`üè∑Ô∏è  Input Tags: ${example.input.tags.join(', ')}`);
    }
    
    try {
      const result = await runCodexCLI(example.input);
      
      console.log('\n‚ú® REFINED OUTPUT:');
      console.log(`üìù Improved Prompt:\n   "${result.improvedPrompt}"\n`);
      console.log(`üí° Rationale:\n   ${result.rationale}\n`);
      console.log(`‚ö†Ô∏è  Identified Risks:`);
      result.risks.forEach(risk => console.log(`   ‚Ä¢ ${risk}`));
      
      console.log(`\nüè∑Ô∏è  Suggested Tags: ${result.tags.join(', ')}`);
      
      console.log(`\nüìä Structured Metadata:`);
      console.log(`   üìã Sections: ${result.metadata.sections.join(' ‚Üí ')}`);
      console.log(`   ‚úÖ Acceptance Criteria:`);
      result.metadata.acceptanceCriteria.forEach(criteria => {
        console.log(`      ‚Ä¢ ${criteria}`);
      });
      console.log(`   üìù Implementation Checklist:`);
      result.metadata.checklist.forEach(item => {
        console.log(`      ‚Ä¢ ${item}`);
      });
      
    } catch (error) {
      console.log(`‚ùå Error: ${error.message}`);
    }
    
    console.log('\n' + '=' .repeat(80) + '\n');
  }
  
  console.log('üéä Demonstration complete!');
  console.log('\nüí° Key Features Demonstrated:');
  console.log('   ‚Ä¢ Prompt enhancement with structured output');
  console.log('   ‚Ä¢ Risk identification and mitigation suggestions');
  console.log('   ‚Ä¢ Automatic tag generation based on content');
  console.log('   ‚Ä¢ Template-based metadata with acceptance criteria');
  console.log('   ‚Ä¢ Implementation checklists for actionable next steps');
  console.log('   ‚Ä¢ Graceful fallback when external LLM unavailable');
  
  console.log('\nüîß Ready for Integration:');
  console.log('   ‚Ä¢ Works with VSCode, Trae, Cursor, and Claude Desktop');
  console.log('   ‚Ä¢ Stdio-based MCP protocol for seamless IDE integration');
  console.log('   ‚Ä¢ Portuguese user responses, English code/comments');
  console.log('   ‚Ä¢ Modular architecture for easy extensibility');
}

demonstratePromptRefinement().catch(console.error);